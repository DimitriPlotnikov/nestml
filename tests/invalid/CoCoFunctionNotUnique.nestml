/**
 *
 *  CoCoFunctionNotUnique.nestml
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * This model is used to test_building_symboltable_for_all_neurons if broken CoCos are identified correctly. Here, if redeclaration of predefined functions
 * is detected.
 * Negative case.
*/

neuron CoCoFunctionNotUnique:
    function delta(Tau_a ms,Tau_b ms) real: # redeclaration should be detected
        test_building_symboltable_for_all_neurons real = 1
        return # missing return type should be detected
    end

    function deltaBoolean(Tau_a ms,Tau_b ms) boolean:
        test_building_symboltable_for_all_neurons real = 1
        return test_building_symboltable_for_all_neurons # here wrong type of return should be detected
    end

    function deltaNoReturn(Tau_a ms,Tau_b ms) boolean:
        test_building_symboltable_for_all_neurons real = 1
        if True == True:
            return True
        else:
           test_building_symboltable_for_all_neurons = test_building_symboltable_for_all_neurons # here no return statement should be detected
        end
    end

    input:
        # in order to generate an ast
    end

    output: spike

    update:
        # in order to generate an ast
    end

end