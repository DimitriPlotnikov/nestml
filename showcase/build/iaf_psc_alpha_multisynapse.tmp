/*
Name: iaf_psc_alpha_multisynapse_nestml - Leaky integrate-and-fire neuron model with
                                   multiple ports.

Description:

iaf_psc_alpha_multisynapse is a direct extension of iaf_psc_alpha.
On the postsynapic side, there can be arbitrarily many synaptic
time constants (iaf_psc_alpha has exactly two: tau_syn_ex and tau_syn_in).

This can be reached by specifying separate receptor ports, each for
a different time constant. The port number has to match the respective
"receptor_type" in the connectors.

References:
  [1] Rotter S & Diesmann M (1999) Exact simulation of time-invariant linear
      systems with applications to neuronal modeling. Biologial Cybernetics
      81:381-402.
  [2] Diesmann M, Gewaltig M-O, Rotter S, & Aertsen A (2001) State space
      analysis of synchronous spiking in cortical neural networks.
      Neurocomputing 38-40:565-571.

Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLoggingRequest

Author:  Schrader, adapted from iaf_psc_alpha
SeeAlso: iaf_psc_alpha, iaf_psc_delta, iaf_psc_exp, iaf_cond_exp,
iaf_psc_exp_multisynapse
*/
neuron iaf_psc_alpha_multisynapse_neuron:
  state:
    V_abs mV
    function V_m mV = V_abs+E_L
    y1_I_shape real [receptors]
    y2_I_shape real [receptors]
  end
  equations:
    shape I_shape = 1*(e/tau_syn)*t*exp((-1)/tau_syn*t)
    V_abs' = (-1)/tau_m*V_abs+1/C_m*(curr_sum(I_shape, spikes)+I_e+currents)
  end
  parameters:
    receptors integer = 100
    C_m pF = 250
    tau_m ms = 10
    tau_syn ms [receptors] = 2
    t_ref ms = 2
    E_L mV = (-70)
    function V_reset mV = (-70.0)-E_L
    function V_th mV = (-55.0)-E_L
    # I.e. the real threshold is (E_L+V_th).
    I_e pA = 0
  end
  internals:
    RefractoryCounts integer = steps(t_ref)
    r integer
    __h__ ms = resolution()
    P30 real = tau_m/C_m-tau_m*exp((-__h__)/tau_m)/C_m
    y1_I_shapePSCInitialValue real [receptors] = e/tau_syn
    P_I_shape_00 real [receptors] = exp((-__h__)/tau_syn)
    P_I_shape_01 real = 0
    P_I_shape_02 real = 0
    P_I_shape_10 real [receptors] = __h__*exp((-__h__)/tau_syn)
    P_I_shape_11 real [receptors] = exp((-__h__)/tau_syn)
    P_I_shape_12 real = 0
    P_I_shape_20 real [receptors] = (-tau_m)*tau_syn*(__h__*tau_m*exp(__h__/tau_m)-__h__*tau_syn*exp(__h__/tau_m)+tau_m*tau_syn*exp(__h__/tau_m)-tau_m*tau_syn*exp(__h__/tau_syn))*exp((-__h__)/tau_syn-__h__/tau_m)/(C_m*((tau_m)**(2)-2*tau_m*tau_syn+(tau_syn)**(2)))
    P_I_shape_21 real [receptors] = (-tau_m)*tau_syn*(exp(__h__/tau_m)-exp(__h__/tau_syn))*exp((-__h__)/tau_syn-__h__/tau_m)/(C_m*(tau_m-tau_syn))
    P_I_shape_22 real = exp((-__h__)/tau_m)
    __P01 real [receptors] = exp(((-__h__))/tau_syn)
    __P11 real [receptors] = exp(((-__h__))/tau_syn)
  end
  input:
    spikes[receptors] <- spike
    currents <- current
  end
  output: spike
  update:
    if r==0: # not refractory
      V_abs = P30*(I_e+currents)+V_abs*exp((-__h__)/tau_m)
      V_abs += P_I_shape_20*y1_I_shape+P_I_shape_21*y2_I_shape
    else:
      r = r-1
    end
    if V_abs>=V_th: # threshold crossing
      r = RefractoryCounts
      V_abs = V_reset
      # A supra-threshold membrane potential should never be observable.# The reset at the time of threshold crossing enables accurate# integration independent of the computation step size, see [2,3] for# details.
      emit_spike()
    end
    y2_I_shape = (__h__*y1_I_shape+y2_I_shape)*__P01
    y1_I_shape = y1_I_shape*__P11
    y1_I_shape += y1_I_shapePSCInitialValue*spikes
  
  end
end
